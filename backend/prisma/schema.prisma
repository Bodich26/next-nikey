generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

//--Enum
enum Role {
    USER
    ADMIN
}

enum ShippingMethod {
    STANDARD
    EXPEDITED
    NEXT_DAY
}

enum PaymentMethod {
    ONLINE
    UPON_RECEIPT
}

enum OrderStatus {
    PENDING
    SUCCESS
    REJECTED
}

enum Gender {
    MEN
    WOMEN
    UNISEX
}

enum PurposeType {
    LIFESTYLE
    RUNNING
    TRAINING
}

enum AgeCategory {
    ADULT
    KIDS
}

//---Products
model Sneaker {
    id          String           @id @default(cuid())
    brand       String
    model       String
    gender      Gender
    ageCategory AgeCategory
    purposes    SneakerPurpose[]
    variants    ColorVariant[]

    reviews     Review[]
    views       Int      @default(0)
    isAvailable Boolean  @default(true)
    slug        String   @unique

    productSliders ProductSlider[]

    collection   Collection? @relation(fields: [collectionId], references: [id])
    collectionId String?

    carts     CartOnSneakers[]
    favorites FavoritesOnProducts[]
    orders    OrderItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ColorVariant {
    id        String  @id @default(cuid())
    color     String
    mainImage String
    images    Image[]
    sizes     Size[]
    quantity  Int
    price     Int
    discount  Int     @default(0)
    sneaker   Sneaker @relation(fields: [sneakerId], references: [id])
    sneakerId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Collection {
    id          String    @id @default(cuid())
    name        String    @unique
    description String
    slug        String    @unique
    sneakers    Sneaker[]
    isActive    Boolean   @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SneakerPurpose {
    id        Int         @id @default(autoincrement())
    sneaker   Sneaker     @relation(fields: [sneakerId], references: [id])
    sneakerId String
    purpose   PurposeType

    @@unique([sneakerId, purpose])
}

model Size {
    id             Int          @id @default(autoincrement())
    value          Float
    colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id])
    colorVariantId String
}

model Image {
    id             Int          @id @default(autoincrement())
    url            String
    colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id])
    colorVariantId String
}

//----User
model User {
    id       String  @id @default(cuid())
    clerkId  String? @unique
    name     String
    email    String  @unique
    password String?
    image    String
    role     Role    @default(USER)

    reviews     Review[]
    userCoupons UserCoupon[]
    favorites   Favorites[]
    cart        Cart[]
    order       Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Review {
    id        String   @id @default(cuid())
    rating    Float
    comment   String?
    sneaker   Sneaker  @relation(fields: [sneakerId], references: [id])
    sneakerId String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@unique([sneakerId, userId])
}

model Coupon {
    id             String       @id @default(cuid())
    code           String       @unique
    description    String?
    discount       Int          @default(0)
    minOrderValue  Float?
    expiresAt      DateTime?
    onlyFirstOrder Boolean      @default(false)
    users          UserCoupon[]
    createdAt      DateTime     @default(now())
}

model UserCoupon {
    id       Int       @id @default(autoincrement())
    user     User      @relation(fields: [userId], references: [id])
    userId   String
    coupon   Coupon    @relation(fields: [couponId], references: [id])
    couponId String
    used     Boolean   @default(false)
    usedAt   DateTime?

    @@unique([userId, couponId])
}

//---Cart
model Cart {
    id     Int     @id @default(autoincrement())
    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique

    token     String?   @unique
    expiresAt DateTime?

    cartItems   CartOnSneakers[]
    totalAmount Int              @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartOnSneakers {
    cartId    Int
    sneakerId String

    cart    Cart    @relation(fields: [cartId], references: [id])
    sneaker Sneaker @relation(fields: [sneakerId], references: [id])

    quantity Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([cartId, sneakerId])
}

//---Favorites
model Favorites {
    id            Int                   @id @default(autoincrement())
    favoriteItems FavoritesOnProducts[]

    token     String?   @unique
    expiresAt DateTime?

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FavoritesOnProducts {
    favoritesId Int
    sneakerId   String

    favorites Favorites @relation(fields: [favoritesId], references: [id])
    sneaker   Sneaker   @relation(fields: [sneakerId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([sneakerId, favoritesId])
}

//--Orders
model Order {
    id          Int     @id @default(autoincrement())
    orderNumber String  @unique
    user        User?   @relation(fields: [userId], references: [id])
    userId      String?

    sessionId       String?
    name            String
    phone           String
    email           String
    deliveryAddress String
    status          OrderStatus @default(PENDING)

    paymentMethod  PaymentMethod
    shippingMethod ShippingMethod

    shippingCost Float
    orderAmount  Float
    orderItems   OrderItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([status])
}

model OrderItem {
    id      Int   @id @default(autoincrement())
    order   Order @relation(fields: [orderId], references: [id])
    orderId Int

    sneaker   Sneaker @relation(fields: [sneakerId], references: [id])
    sneakerId String

    quantity Int
    price    Float

    createdAt DateTime @default(now())
}

//---Blog
model Blog {
    id         Int     @id @default(autoincrement())
    title      String
    slug       String  @unique
    image      String
    content    String
    isFeatured Boolean @default(false)
    author     String

    views Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//---Sliders
model CatalogSlider {
    id       Int     @id @default(autoincrement())
    image    String
    title    String
    text     String
    order    Int     @default(0)
    isActive Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductSlider {
    id Int @id @default(autoincrement())

    sneaker   Sneaker @relation(fields: [sneakerId], references: [id])
    sneakerId String

    image String
    title String
    text  String

    order    Int     @default(0)
    isActive Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
